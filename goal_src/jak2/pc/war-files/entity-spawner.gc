;;-*-Lisp-*-
(in-package goal)

;; name: entity-spawner.gc
;; name in dgo: entity-spawner
;; dgos: ENGINE, GAME

(define spawnslot 0) ;keeps track of enemy count in pool
(define spawncap 20) ;sets the cap of random enemies allowed in the pool
(define stored-vector (new-stack-vector0))

(defun spawn-process-mantis ()
    (when (> spawnslot spawncap)
        (format #t "Cannot spawn more entities, activate (kill-all-process-entity)")
    )
    (when (<= spawnslot spawncap) ;//type tracker
        (+! spawnslot 1)
        (let (
         (vec (new-stack-vector0))
         (tp0 (target-pos 0))
         (rx (rand-vu-int-range 3 16))
         (rz (rand-vu-int-range 3 16))
         (off1 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 0) :w 1.0)) ;v  "random" vector offsetter  v
         (off2 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 4) :w 1.0))
         (off3 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 4) :w 1.0))
         (off4 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 0) :w 1.0))
         (off5 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 8) :w 1.0))
         (off6 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 8) :w 1.0))
         (off7 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters 0) :w 1.0))
         (off8 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -4) :w 1.0))
         (off9 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -4) :w 1.0))
         (off10 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters 0) :w 1.0))
         (off11 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -8) :w 1.0))
         (off12 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters -8) :w 1.0)));^                             ^
            (let ((rng (rand-vu-int-range 1 12))) ;//random vector offset selection, can add many more if I want to
                (when 
                (and 
                *target*
                )
                    (when (= rng 1)
                        (vector-copy! vec (vector+! vec tp0 off1))
                    )
                    (when (= rng 2)
                        (vector-copy! vec (vector+! vec tp0 off2))
                    )
                    (when (= rng 3)
                        (vector-copy! vec (vector+! vec tp0 off3))
                    )
                    (when (= rng 4)
                        (vector-copy! vec (vector+! vec tp0 off4))
                    )
                    (when (= rng 5)
                        (vector-copy! vec (vector+! vec tp0 off5))
                    )
                    (when (= rng 6)
                        (vector-copy! vec (vector+! vec tp0 off6))
                    )
                    (when (= rng 7)
                        (vector-copy! vec (vector+! vec tp0 off7))
                    )
                    (when (= rng 8)
                        (vector-copy! vec (vector+! vec tp0 off8))
                    )
                    (when (= rng 9)
                        (vector-copy! vec (vector+! vec tp0 off9))
                    )
                    (when (= rng 10)
                        (vector-copy! vec (vector+! vec tp0 off10))
                    )
                    (when (= rng 11)
                        (vector-copy! vec (vector+! vec tp0 off11))
                    )
                    (when (= rng 12)
                        (vector-copy! vec (vector+! vec tp0 off12))
                    )
                )
            )
            (process-spawn mantis-custom vec)
        )
    )
        
    (none)
)

(defun spawn-process-group-guard-3 ()
    (let (
         (vec (new-stack-vector0))
         (tp0 (target-pos 0))
         (rx (rand-vu-int-range 3 16))
         (rz (rand-vu-int-range 3 16))
         (off1 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 0) :w 1.0)) ;v  "random" vector offsetter  v
         (off2 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 4) :w 1.0))
         (off3 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 4) :w 1.0))
         (off4 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 0) :w 1.0))
         (off5 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 8) :w 1.0))
         (off6 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 8) :w 1.0))
         (off7 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters 0) :w 1.0))
         (off8 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -4) :w 1.0))
         (off9 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -4) :w 1.0))
         (off10 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters 0) :w 1.0))
         (off11 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -8) :w 1.0))
         (off12 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters -8) :w 1.0)));^                             ^
            (let ((rng (rand-vu-int-range 1 12))) ;//random vector offset selection, can add many more if I want to
                (when 
                (and 
                *target*
                )
                    (when (= rng 1)
                        (vector-copy! vec (vector+! vec tp0 off1))
                    )
                    (when (= rng 2)
                        (vector-copy! vec (vector+! vec tp0 off2))
                    )
                    (when (= rng 3)
                        (vector-copy! vec (vector+! vec tp0 off3))
                    )
                    (when (= rng 4)
                        (vector-copy! vec (vector+! vec tp0 off4))
                    )
                    (when (= rng 5)
                        (vector-copy! vec (vector+! vec tp0 off5))
                    )
                    (when (= rng 6)
                        (vector-copy! vec (vector+! vec tp0 off6))
                    )
                    (when (= rng 7)
                        (vector-copy! vec (vector+! vec tp0 off7))
                    )
                    (when (= rng 8)
                        (vector-copy! vec (vector+! vec tp0 off8))
                    )
                    (when (= rng 9)
                        (vector-copy! vec (vector+! vec tp0 off9))
                    )
                    (when (= rng 10)
                        (vector-copy! vec (vector+! vec tp0 off10))
                    )
                    (when (= rng 11)
                        (vector-copy! vec (vector+! vec tp0 off11))
                    )
                    (when (= rng 12)
                        (vector-copy! vec (vector+! vec tp0 off12))
                    )
                )
            (vector-copy! vec (vector+! vec tp0 off1))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off2))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off3))
            (process-spawn crimson-guard vec)
            )
    )
    (none)
)

(defun spawn-process-group-guard-6 ()
    (let (
         (vec (new-stack-vector0))
         (tp0 (target-pos 0))
         (rx (rand-vu-int-range 3 16))
         (rz (rand-vu-int-range 3 16))
         (off1 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 0) :w 1.0)) ;v  "random" vector offsetter  v
         (off2 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 4) :w 1.0))
         (off3 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 4) :w 1.0))
         (off4 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 0) :w 1.0))
         (off5 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 8) :w 1.0))
         (off6 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 8) :w 1.0))
         (off7 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters 0) :w 1.0))
         (off8 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -4) :w 1.0))
         (off9 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -4) :w 1.0))
         (off10 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters 0) :w 1.0))
         (off11 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -8) :w 1.0))
         (off12 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters -8) :w 1.0)));^                             ^
            (let ((rng (rand-vu-int-range 1 12))) ;//random vector offset selection, can add many more if I want to
                (when 
                (and 
                *target*
                )
                    (when (= rng 1)
                        (vector-copy! vec (vector+! vec tp0 off1))
                    )
                    (when (= rng 2)
                        (vector-copy! vec (vector+! vec tp0 off2))
                    )
                    (when (= rng 3)
                        (vector-copy! vec (vector+! vec tp0 off3))
                    )
                    (when (= rng 4)
                        (vector-copy! vec (vector+! vec tp0 off4))
                    )
                    (when (= rng 5)
                        (vector-copy! vec (vector+! vec tp0 off5))
                    )
                    (when (= rng 6)
                        (vector-copy! vec (vector+! vec tp0 off6))
                    )
                    (when (= rng 7)
                        (vector-copy! vec (vector+! vec tp0 off7))
                    )
                    (when (= rng 8)
                        (vector-copy! vec (vector+! vec tp0 off8))
                    )
                    (when (= rng 9)
                        (vector-copy! vec (vector+! vec tp0 off9))
                    )
                    (when (= rng 10)
                        (vector-copy! vec (vector+! vec tp0 off10))
                    )
                    (when (= rng 11)
                        (vector-copy! vec (vector+! vec tp0 off11))
                    )
                    (when (= rng 12)
                        (vector-copy! vec (vector+! vec tp0 off12))
                    )
                )
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off1))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off2))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off3))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off4))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off5))
            (process-spawn crimson-guard vec)
            )
    )
    (none)
)

(defun spawn-process-group-guard-12 ()
    (let (
         (vec (new-stack-vector0))
         (tp0 (target-pos 0))
         (rx (rand-vu-int-range 3 16))
         (rz (rand-vu-int-range 3 16))
         (off1 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 0) :w 1.0)) ;v  "random" vector offsetter  v
         (off2 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 4) :w 1.0))
         (off3 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 4) :w 1.0))
         (off4 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 0) :w 1.0))
         (off5 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 8) :w 1.0))
         (off6 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 8) :w 1.0))
         (off7 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters 0) :w 1.0))
         (off8 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -4) :w 1.0))
         (off9 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -4) :w 1.0))
         (off10 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters 0) :w 1.0))
         (off11 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -8) :w 1.0))
         (off12 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters -8) :w 1.0)));^                             ^
            (let ((rng (rand-vu-int-range 1 12))) ;//random vector offset selection, can add many more if I want to
                (when 
                (and 
                *target*
                )
                    (when (= rng 1)
                        (vector-copy! vec (vector+! vec tp0 off1))
                    )
                    (when (= rng 2)
                        (vector-copy! vec (vector+! vec tp0 off2))
                    )
                    (when (= rng 3)
                        (vector-copy! vec (vector+! vec tp0 off3))
                    )
                    (when (= rng 4)
                        (vector-copy! vec (vector+! vec tp0 off4))
                    )
                    (when (= rng 5)
                        (vector-copy! vec (vector+! vec tp0 off5))
                    )
                    (when (= rng 6)
                        (vector-copy! vec (vector+! vec tp0 off6))
                    )
                    (when (= rng 7)
                        (vector-copy! vec (vector+! vec tp0 off7))
                    )
                    (when (= rng 8)
                        (vector-copy! vec (vector+! vec tp0 off8))
                    )
                    (when (= rng 9)
                        (vector-copy! vec (vector+! vec tp0 off9))
                    )
                    (when (= rng 10)
                        (vector-copy! vec (vector+! vec tp0 off10))
                    )
                    (when (= rng 11)
                        (vector-copy! vec (vector+! vec tp0 off11))
                    )
                    (when (= rng 12)
                        (vector-copy! vec (vector+! vec tp0 off12))
                    )
                )
            (vector-copy! vec (vector+! vec tp0 off1))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off2))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off3))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off4))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off5))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off6))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off7))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off8))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off9))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off10))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off11))
            (process-spawn crimson-guard vec)
            (vector-copy! vec (vector+! vec tp0 off12))
            (process-spawn crimson-guard vec)
            )
    )
    (none)
)

(defun spawn-process-group-rhino ()
    (when (> spawnslot spawncap)
        (format #t "Cannot spawn more entities, activate (kill-all-process-entity)")
    )
    (when (<= spawnslot (- spawncap 6)) ;//type tracker
        (+! spawnslot 6)
        (let (
         (vec (new-stack-vector0))
         (tp0 (target-pos 0))
         (rx (rand-vu-int-range 3 16))
         (rz (rand-vu-int-range 3 16))
         (off1 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 0) :w 1.0)) ;v  "random" vector offsetter  v
         (off2 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 4) :w 1.0))
         (off3 (new 'static 'vector :x (meters 4) :y (meters 0) :z (meters 4) :w 1.0))
         (off4 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 0) :w 1.0))
         (off5 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters 8) :w 1.0))
         (off6 (new 'static 'vector :x (meters 8) :y (meters 0) :z (meters 8) :w 1.0))
         (off7 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters 0) :w 1.0))
         (off8 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -4) :w 1.0))
         (off9 (new 'static 'vector :x (meters -4) :y (meters 0) :z (meters -4) :w 1.0))
         (off10 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters 0) :w 1.0))
         (off11 (new 'static 'vector :x (meters 0) :y (meters 0) :z (meters -8) :w 1.0))
         (off12 (new 'static 'vector :x (meters -8) :y (meters 0) :z (meters -8) :w 1.0)));^                             ^
            (let ((rng (rand-vu-int-range 1 12))) ;//random vector offset selection, can add many more if I want to
                (when 
                (and 
                *target*
                )
                    (when (= rng 1)
                        (vector-copy! vec (vector+! vec tp0 off1))
                    )
                    (when (= rng 2)
                        (vector-copy! vec (vector+! vec tp0 off2))
                    )
                    (when (= rng 3)
                        (vector-copy! vec (vector+! vec tp0 off3))
                    )
                    (when (= rng 4)
                        (vector-copy! vec (vector+! vec tp0 off4))
                    )
                    (when (= rng 5)
                        (vector-copy! vec (vector+! vec tp0 off5))
                    )
                    (when (= rng 6)
                        (vector-copy! vec (vector+! vec tp0 off6))
                    )
                    (when (= rng 7)
                        (vector-copy! vec (vector+! vec tp0 off7))
                    )
                    (when (= rng 8)
                        (vector-copy! vec (vector+! vec tp0 off8))
                    )
                    (when (= rng 9)
                        (vector-copy! vec (vector+! vec tp0 off9))
                    )
                    (when (= rng 10)
                        (vector-copy! vec (vector+! vec tp0 off10))
                    )
                    (when (= rng 11)
                        (vector-copy! vec (vector+! vec tp0 off11))
                    )
                    (when (= rng 12)
                        (vector-copy! vec (vector+! vec tp0 off12))
                    )
                )
            )
            (process-spawn rhino vec)
            (vector-copy! vec (vector+! vec tp0 off1))
            (process-spawn mantis-custom vec)
            (vector-copy! vec (vector+! vec tp0 off2))
            (process-spawn mantis-custom vec)
            (vector-copy! vec (vector+! vec tp0 off3))
            (process-spawn mantis-custom vec)
            (vector-copy! vec (vector+! vec tp0 off4))
            (process-spawn mantis-custom vec)
            (vector-copy! vec (vector+! vec tp0 off5))
            (process-spawn mantis-custom vec)
        )
    )
        
    (none)
)

(defun kill-all-process-entity ()
    (set! spawnslot 0)
    (kill-by-name "fodder-custom" *default-pool*)
    (kill-by-name "grenadier" *default-pool*)
    (kill-by-name "mantis-custom" *default-pool*)
    (kill-by-name "flitter" *default-pool*)
    (kill-by-name "grunt" *default-pool*)
    (kill-by-name "rhino" *default-pool*)
    (kill-by-name "predator" *default-pool*)
    (kill-by-name "centurion" *default-pool*)
    (kill-by-name "flying-spider" *default-pool*)
    (kill-by-name "crimson-guard" *default-pool*)
    (kill-by-name "roboguard-level" *default-pool*)
    (kill-by-name "flying-spider" *default-pool*)
)
